openapi: 3.1.0
info:
  title: Real Estate API
  description: |
    # Real Estate Management API

    A comprehensive RESTful API for managing real estate listings and user accounts.

    ## Key Features
    - üè† **Listing Management**: Create, read, update, and delete real estate listings
    - üë• **User Management**: Complete user account lifecycle management  
    - üì∏ **Image Upload**: Support for multiple image input methods (file upload, URL, default)
    - üîß **Form Data Support**: Handles both JSON and multipart/form-data requests
    - ‚ö° **Error Handling**: Comprehensive error responses with proper HTTP status codes
    - üìù **Validation**: Request validation using Zod schemas

    ## Technology Stack
    - **Runtime**: Node.js with Express.js
    - **Database**: MongoDB with Mongoose ODM
    - **File Upload**: Cloudinary integration
    - **Validation**: Zod schema validation
    - **Documentation**: OpenAPI 3.1.0 with Swagger UI

    ## Getting Started
    1. Ensure MongoDB is running
    2. Set up environment variables (see README)
    3. Install dependencies: `npm install`
    4. Start development server: `npm run dev`
    5. Visit this documentation at: http://localhost:3000/docs

    ## Support
    For issues and questions, contact the development team.
  version: 1.0.0
  contact:
    name: Real Estate Development Team
    email: dev@realestate.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.realestate.com
    description: Production server

tags:
  - name: Users
    description: User account management operations
  - name: Listings
    description: Real estate listing management operations
  - name: Health
    description: API health and status endpoints

paths:
  # Health endpoints
  /:
    $ref: './paths/health.yaml#/HealthCheck'

  # User endpoints
  /users:
    $ref: './paths/users.yaml#/Users'
  /users/{id}:
    $ref: './paths/users.yaml#/UserById'

  # Listing endpoints
  /listings:
    $ref: './paths/listings.yaml#/Listings'
  /listings/{id}:
    $ref: './paths/listings.yaml#/ListingById'

components:
  # Security schemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication (future implementation)

  # Reusable parameters
  parameters:
    $ref: './components/parameters.yaml'

  # Reusable schemas
  schemas:
    # User schemas
    UserInput:
      $ref: './schemas/users.yaml#/UserInput'
    UserCreate:
      $ref: './schemas/users.yaml#/UserCreate'
    UserUpdate:
      $ref: './schemas/users.yaml#/UserUpdate'
    User:
      $ref: './schemas/users.yaml#/User'
    UserResponse:
      $ref: './schemas/users.yaml#/UserResponse'
    UsersResponse:
      $ref: './schemas/users.yaml#/UsersResponse'

    # Listing schemas
    ListingInput:
      $ref: './schemas/listings.yaml#/ListingInput'
    ListingCreate:
      $ref: './schemas/listings.yaml#/ListingCreate'
    ListingUpdate:
      $ref: './schemas/listings.yaml#/ListingUpdate'
    Listing:
      $ref: './schemas/listings.yaml#/Listing'
    ListingResponse:
      $ref: './schemas/listings.yaml#/ListingResponse'
    ListingsResponse:
      $ref: './schemas/listings.yaml#/ListingsResponse'

    # Common schemas
    ErrorResponse:
      $ref: './schemas/common.yaml#/ErrorResponse'
    ValidationError:
      $ref: './schemas/common.yaml#/ValidationError'
    NotFoundError:
      $ref: './schemas/common.yaml#/NotFoundError'
    ServerError:
      $ref: './schemas/common.yaml#/ServerError'

  # Reusable examples
  examples:
    $ref: './components/examples.yaml'

  # Reusable responses
  responses:
    $ref: './components/responses.yaml'
