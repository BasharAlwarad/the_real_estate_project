Users:
  get:
    tags:
      - Users
    summary: Get all users
    description: Retrieve all users from the database
    responses:
      200:
        description: Successfully retrieved all users
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/UsersResponse'
            examples:
              success:
                summary: Successful response
                value:
                  message: 'Users retrieved successfully'
                  users:
                    - _id: '507f1f77bcf86cd799439011'
                      userName: 'john_doe'
                      email: 'john.doe@example.com'
                      image: 'https://res.cloudinary.com/demo/image/upload/profile.jpg'
                      createdAt: '2025-10-10T10:30:00.000Z'
                      updatedAt: '2025-10-10T15:45:00.000Z'
                    - _id: '507f1f77bcf86cd799439012'
                      userName: 'jane_smith'
                      email: 'jane.smith@example.com'
                      image: 'https://res.cloudinary.com/demo/image/upload/profile2.jpg'
                      createdAt: '2025-10-10T11:30:00.000Z'
                      updatedAt: '2025-10-10T16:45:00.000Z'
                  count: 2
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ServerError'

  post:
    tags:
      - Users
    summary: Create a new user
    description: Create a new user account
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../openapi.yaml#/components/schemas/UserCreate'
          examples:
            create_user:
              summary: Create user request
              value:
                userName: 'jane_smith'
                email: 'jane.smith@example.com'
                password: 'securePassword123'
                image: 'https://example.com/profile.jpg'
        multipart/form-data:
          schema:
            type: object
            properties:
              userName:
                type: string
                example: 'jane_smith'
              email:
                type: string
                format: email
                example: 'jane.smith@example.com'
              password:
                type: string
                format: password
                example: 'securePassword123'
              image:
                type: string
                format: binary
                description: Profile image file upload
    responses:
      201:
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/UserResponse'
      400:
        description: Bad request - validation error
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ValidationError'
      422:
        description: Unprocessable entity - empty request body
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ErrorResponse'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ServerError'

UserById:
  get:
    tags:
      - Users
    summary: Get user by ID
    description: Retrieve a specific user by their ID
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: objectid
          pattern: '^[0-9a-fA-F]{24}$'
          example: '507f1f77bcf86cd799439011'
        description: MongoDB ObjectId of the user
    responses:
      200:
        description: Successfully retrieved the user
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/User'
      400:
        description: Bad request - invalid user ID
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ValidationError'
      404:
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/NotFoundError'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ServerError'

  put:
    tags:
      - Users
    summary: Update user by ID
    description: Update a specific user by their ID
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: objectid
          pattern: '^[0-9a-fA-F]{24}$'
          example: '507f1f77bcf86cd799439011'
        description: MongoDB ObjectId of the user
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../openapi.yaml#/components/schemas/UserUpdate'
        multipart/form-data:
          schema:
            type: object
            properties:
              userName:
                type: string
                example: 'updated_username'
              email:
                type: string
                format: email
                example: 'updated@example.com'
              image:
                type: string
                format: binary
                description: New profile image file upload
    responses:
      200:
        description: User updated successfully
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/UserResponse'
      400:
        description: Bad request - invalid user ID or validation error
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ValidationError'
      404:
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/NotFoundError'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ServerError'

  delete:
    tags:
      - Users
    summary: Delete user by ID
    description: Delete a specific user by their ID
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: objectid
          pattern: '^[0-9a-fA-F]{24}$'
          example: '507f1f77bcf86cd799439011'
        description: MongoDB ObjectId of the user
    responses:
      200:
        description: User deleted successfully
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/UserResponse'
      400:
        description: Bad request - invalid user ID
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ValidationError'
      404:
        description: User not found
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/NotFoundError'
      500:
        description: Server error
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ServerError'
